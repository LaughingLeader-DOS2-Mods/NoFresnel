[Vertex shader]


#include "Shaders/PS4/srt_struct.h"
#include "Shaders/PS4/CommonHelpers.shdh"

struct VertexOutput
{
	float4 ProjectedPosition : S_Position;
	float3 WorldNormal : TEXCOORD0;
	float3 WorldBinormal : TEXCOORD1;
	float3 WorldTangent : TEXCOORD2;
	float3 WorldView : TEXCOORD3;
	float2 TexCoords0 : TEXCOORD4;
	float HeightFog : TEXCOORD5;
	float DistanceFog : TEXCOORD6;
};

@uniform row_major float4x4 WorldMatrix;
VertexOutput main(uint id : S_VERTEX_ID,
	SrtVsData srtData : S_SRT_DATA)
{
	// Retrieve SRT data:
	@uniform(global_FogPropertyMatrix);
	@uniform(global_View);
	@uniform(global_ViewProjection);
	@uniform(global_ViewPos);
	@uniform(WorldMatrix);

	VertexOutput Out;

	row_major float3x4 boneMatrix1 = SRT_VS_BONES_BONE(SRT_VS_BONES_INDICIES(id).x);
	row_major float3x4 boneMatrix2 = SRT_VS_BONES_BONE(SRT_VS_BONES_INDICIES(id).y);
	row_major float3x4 boneMatrix3 = SRT_VS_BONES_BONE(SRT_VS_BONES_INDICIES(id).z);
	row_major float3x4 boneMatrix4 = SRT_VS_BONES_BONE(SRT_VS_BONES_INDICIES(id).w);
	//World space position
	float4 worldPosition = float4(0.0f, 0.0f, 0.0f, 1.0f);
	float4 tempPosSkinned = float4(SRT_VS_BUFFER_POSITION(id).xyz, 1.0f);
	worldPosition.xyz = (worldPosition.xyz + (SRT_VS_BONES_WEIGHTS(id).x * mul(boneMatrix1, tempPosSkinned)));
	worldPosition.xyz = (worldPosition.xyz + (SRT_VS_BONES_WEIGHTS(id).y * mul(boneMatrix2, tempPosSkinned)));
	worldPosition.xyz = (worldPosition.xyz + (SRT_VS_BONES_WEIGHTS(id).z * mul(boneMatrix3, tempPosSkinned)));
	worldPosition.xyz = (worldPosition.xyz + (SRT_VS_BONES_WEIGHTS(id).w * mul(boneMatrix4, tempPosSkinned)));
	worldPosition = mul(WorldMatrix, worldPosition);

	//Projected position
	float4 projectedPosition = mul(global_ViewProjection, worldPosition);

	//Pass projected position to pixel shader
	Out.ProjectedPosition = projectedPosition;

	//Compute local tangent frame
	row_major float3x3 LocalTangentFrame = GetTangentFrame(SRT_VS_BUFFER_QTANGENT(id));

	float3 LocalNormal = LocalTangentFrame[2];

	//Normalize Local Normal
	float3 localNormalNormalized = normalize(LocalNormal);

	//World space Normal
	float3 worldNormal = float3(0.0f, 0.0f, 0.0f);
	worldNormal = (worldNormal + (SRT_VS_BONES_WEIGHTS(id).x * mul(boneMatrix1, float4(localNormalNormalized, 0.0f))));
	worldNormal = (worldNormal + (SRT_VS_BONES_WEIGHTS(id).y * mul(boneMatrix2, float4(localNormalNormalized, 0.0f))));
	worldNormal = (worldNormal + (SRT_VS_BONES_WEIGHTS(id).z * mul(boneMatrix3, float4(localNormalNormalized, 0.0f))));
	worldNormal = (worldNormal + (SRT_VS_BONES_WEIGHTS(id).w * mul(boneMatrix4, float4(localNormalNormalized, 0.0f))));
	worldNormal = mul(WorldMatrix, float4(worldNormal, 0.0f)).xyz;

	//Normalize World Normal
	float3 worldNormalNormalized = normalize(worldNormal);

	Out.WorldNormal = worldNormalNormalized;

	float3 LocalBinormal = LocalTangentFrame[1];

	//Normalize Local Binormal
	float3 localBinormalNormalized = normalize(LocalBinormal);

	//World space Binormal
	float3 worldBinormal = float3(0.0f, 0.0f, 0.0f);
	worldBinormal = (worldBinormal + (SRT_VS_BONES_WEIGHTS(id).x * mul(boneMatrix1, float4(localBinormalNormalized, 0.0f))));
	worldBinormal = (worldBinormal + (SRT_VS_BONES_WEIGHTS(id).y * mul(boneMatrix2, float4(localBinormalNormalized, 0.0f))));
	worldBinormal = (worldBinormal + (SRT_VS_BONES_WEIGHTS(id).z * mul(boneMatrix3, float4(localBinormalNormalized, 0.0f))));
	worldBinormal = (worldBinormal + (SRT_VS_BONES_WEIGHTS(id).w * mul(boneMatrix4, float4(localBinormalNormalized, 0.0f))));
	worldBinormal = mul(WorldMatrix, float4(worldBinormal, 0.0f)).xyz;

	//Normalize World Binormal
	float3 worldBinormalNormalized = normalize(worldBinormal);

	Out.WorldBinormal = worldBinormalNormalized;

	float3 LocalTangent = LocalTangentFrame[0];

	//Normalize Local Tangent
	float3 localTangentNormalized = normalize(LocalTangent);

	//World space Tangent
	float3 worldTangent = float3(0.0f, 0.0f, 0.0f);
	worldTangent = (worldTangent + (SRT_VS_BONES_WEIGHTS(id).x * mul(boneMatrix1, float4(localTangentNormalized, 0.0f))));
	worldTangent = (worldTangent + (SRT_VS_BONES_WEIGHTS(id).y * mul(boneMatrix2, float4(localTangentNormalized, 0.0f))));
	worldTangent = (worldTangent + (SRT_VS_BONES_WEIGHTS(id).z * mul(boneMatrix3, float4(localTangentNormalized, 0.0f))));
	worldTangent = (worldTangent + (SRT_VS_BONES_WEIGHTS(id).w * mul(boneMatrix4, float4(localTangentNormalized, 0.0f))));
	worldTangent = mul(WorldMatrix, float4(worldTangent, 0.0f)).xyz;

	//Normalize World Tangent
	float3 worldTangentNormalized = normalize(worldTangent);

	Out.WorldTangent = worldTangentNormalized;

	//World space view vector
	float3 worldView = (global_ViewPos.xyz - worldPosition.xyz);

	Out.WorldView = worldView;

	Out.TexCoords0 = SRT_VS_BUFFER_TEXCOORD0(id);
	//Calculate Height Fog
	float depthValue = saturate(((global_FogPropertyMatrix[3].y - length(worldView)) / (global_FogPropertyMatrix[3].y - global_FogPropertyMatrix[3].x)));
	float heightDensity = ((worldPosition.y - global_FogPropertyMatrix[2].z) / global_FogPropertyMatrix[3].z);
	float heightFog = saturate(max(depthValue, heightDensity));

	Out.HeightFog = heightFog;

	//Calculate Distance Fog
	float distanceFog = saturate(((global_FogPropertyMatrix[2].y - length(worldView)) / (global_FogPropertyMatrix[2].y - global_FogPropertyMatrix[2].x)));

	Out.DistanceFog = distanceFog;


	return Out;
}


[Fragment shader]


#include "Shaders/PS4/srt_struct.h"
#include "Shaders/PS4/CommonHelpers.shdh"
#include "Shaders/PS4/PBR.shdh"
#include "Shaders/PS4/Exposure.shdh"
#include "Shaders/PS4/ImageBasedLightingHelpers.shdh"

struct PixelInput
{
	float4 ProjectedPosition : S_Position;
	float3 WorldNormal : TEXCOORD0;
	float3 WorldBinormal : TEXCOORD1;
	float3 WorldTangent : TEXCOORD2;
	float3 WorldView : TEXCOORD3;
	float2 TexCoords0 : TEXCOORD4;
	float HeightFog : TEXCOORD5;
	float DistanceFog : TEXCOORD6;
};

struct PixelOutput
{
	float4 Color0 : S_TARGET_OUTPUT0;
};

@uniform float _OpacityFade;
@uniform float FloatParameter_Speed;
@uniform float FloatParameter_PulseMin;
@uniform float FloatParameter_PulseMax;
@uniform float4 Vector4Parameter_Color;
@uniform float FloatParameter_RainbowFresnelStrength;
@uniform float FloatParameter_AddedColorRepeat;
@uniform SamplerState _DefaultWrapSampler;
@uniform Texture2D Texture2DParameter_9dc5807b36974b8fab0fb9c5c1bd7010_DefaultWrapSampler;
@uniform Texture2D Texture2DParameter_WorldPositionColorMap_DefaultWrapSampler;
@uniform float FloatParameter_RainbowColourStrength;
@uniform float FloatParameter_Map01EmissiveMult;
@uniform float2 Vector2Parameter_Map01Panner;
@uniform float2 Vector2Parameter_Map01Tiling;
@uniform float2 Vector2Parameter_UVNoisePanner;
@uniform float2 Vector2Parameter_UVNoiseTiling;
@uniform Texture2D Texture2DParameter_UVNoiseMap_DefaultWrapSampler;
@uniform float FloatParameter_Map01UVNoiseMult;
@uniform Texture2D Texture2DParameter_EmissiveMap01_DefaultWrapSampler;
@uniform float FloatParameter_Map01Contrast;
@uniform float3 Vector3Parameter_Map01ColorMult;
@uniform float2 Vector2Parameter_Map02Panner;
@uniform float2 Vector2Parameter_Map02Tiling;
@uniform float FloatParameter_Map02UVNoiseMult;
@uniform Texture2D Texture2DParameter_EmissiveMap02_DefaultWrapSampler;
@uniform float FloatParameter_Map02Contrast;
@uniform float3 Vector3Parameter_Map02ColorMult;
@uniform float FloatParameter_Map02EmissiveMult;
@uniform float FloatParameter_EmissivePower;
@uniform float FloatParameter_FresnelPulseSpeed;
@uniform float FloatParameter_FresnelPower;
@uniform float FloatParameter_FresnelMax;
@uniform float FloatParameter_InverseFresnel;
@uniform float FloatParameter_Opacity;
@uniform Texture2D Texture2DParameter_normalmap_DefaultWrapSampler;
@uniform float4 Vector4Parameter_Color1;
@uniform Texture2D Texture2DParameter_MSKskin_DefaultWrapSampler;
@uniform float4 Vector4Parameter_Color2;
@uniform float4 Vector4Parameter_Color3;
@uniform Texture2D Texture2DParameter_MSKcloth_DefaultWrapSampler;
@uniform float4 Vector4Parameter_Color4;
@uniform float4 Vector4Parameter_Color5;
@uniform Texture2D Texture2DParameter_basecolor_DefaultWrapSampler;
@uniform Texture2D Texture2DParameter_physicalmap_DefaultWrapSampler;
@uniform float FloatParameter_Reflectance;
void CalculateMatEmissiveColor(SrtPsData srtData : S_SRT_DATA,
	float3 in_0,
	float2 in_1,
	out float3 out_0)
{
	// Retrieve SRT data:
	@uniform(global_Data);
	@uniform(FloatParameter_Speed);
	@uniform(FloatParameter_PulseMin);
	@uniform(FloatParameter_PulseMax);
	@uniform(Vector4Parameter_Color);
	@uniform(FloatParameter_RainbowFresnelStrength);
	@uniform(FloatParameter_AddedColorRepeat);
	@uniform(_DefaultWrapSampler);
	@uniform(Texture2DParameter_9dc5807b36974b8fab0fb9c5c1bd7010_DefaultWrapSampler);
	@uniform(Texture2DParameter_WorldPositionColorMap_DefaultWrapSampler);
	@uniform(FloatParameter_RainbowColourStrength);
	@uniform(FloatParameter_Map01EmissiveMult);
	@uniform(Vector2Parameter_Map01Panner);
	@uniform(Vector2Parameter_Map01Tiling);
	@uniform(Vector2Parameter_UVNoisePanner);
	@uniform(Vector2Parameter_UVNoiseTiling);
	@uniform(Texture2DParameter_UVNoiseMap_DefaultWrapSampler);
	@uniform(FloatParameter_Map01UVNoiseMult);
	@uniform(Texture2DParameter_EmissiveMap01_DefaultWrapSampler);
	@uniform(FloatParameter_Map01Contrast);
	@uniform(Vector3Parameter_Map01ColorMult);
	@uniform(Vector2Parameter_Map02Panner);
	@uniform(Vector2Parameter_Map02Tiling);
	@uniform(FloatParameter_Map02UVNoiseMult);
	@uniform(Texture2DParameter_EmissiveMap02_DefaultWrapSampler);
	@uniform(FloatParameter_Map02Contrast);
	@uniform(Vector3Parameter_Map02ColorMult);
	@uniform(FloatParameter_Map02EmissiveMult);
	@uniform(FloatParameter_EmissivePower);
	@uniform(FloatParameter_FresnelPulseSpeed);
	@uniform(FloatParameter_FresnelPower);
	@uniform(FloatParameter_FresnelMax);
	@uniform(FloatParameter_InverseFresnel);
	@uniform(FloatParameter_Opacity);

	float Local0 = (global_Data.x * FloatParameter_Speed);
	float Local1 = ((((sin(Local0) * 0.5f) + 0.5f) * (FloatParameter_PulseMax - FloatParameter_PulseMin)) + FloatParameter_PulseMin);
	float3 Local2 = Vector4Parameter_Color.xyz;
	float Local3 = pow((1.0f - saturate(dot(float3(0.0f, 1.0f, 0.0f), in_0))), FloatParameter_RainbowFresnelStrength);
	float2 Local4 = (in_1 * FloatParameter_AddedColorRepeat);
	float4 Local5 = Texture2DParameter_9dc5807b36974b8fab0fb9c5c1bd7010_DefaultWrapSampler.Sample(_DefaultWrapSampler, (Local4 + (float2(0.05f, 0.03f) * global_Data.x)));
	//[Local5] Get needed components
	float Local6 = Local5.x;
	float4 Local7 = Texture2DParameter_WorldPositionColorMap_DefaultWrapSampler.Sample(_DefaultWrapSampler, float2(Local6, Local6));
	//[Local7] Get needed components
	float3 Local8 = Local7.xyz;
	float3 Local9 = (Local8 * FloatParameter_RainbowColourStrength);
	float3 Local10 = (Local3 * Local9);
	float Local11 = (global_Data.x * 0.1f);
	float2 Local12 = (in_1 * Vector2Parameter_Map01Tiling);
	float2 Local13 = (in_1 * Vector2Parameter_UVNoiseTiling);
	float2 Local14 = mad(Vector2Parameter_UVNoisePanner, global_Data.x, Local13);
	float4 Local15 = Texture2DParameter_UVNoiseMap_DefaultWrapSampler.Sample(_DefaultWrapSampler, Local14);
	//[Local15] Get needed components
	float Local16 = Local15.x;
	float Local17 = mad(Local16, 2.0f, -1.0f);
	float Local18 = (FloatParameter_Map01UVNoiseMult * 0.01f);
	float Local19 = (Local17 * Local18);
	float2 Local20 = (Local12 + Local19);
	float2 Local21 = mad(Vector2Parameter_Map01Panner, Local11, Local20);
	float4 Local22 = Texture2DParameter_EmissiveMap01_DefaultWrapSampler.Sample(_DefaultWrapSampler, Local21);
	//[Local22] Get needed components
	float Local23 = Local22.x;
	float Local24 = pow(Local23, FloatParameter_Map01Contrast);
	float3 Local25 = (Local24 * Vector3Parameter_Map01ColorMult);
	float3 Local26 = (FloatParameter_Map01EmissiveMult * Local25);
	float Local27 = (global_Data.x * 0.1f);
	float2 Local28 = (in_1 * Vector2Parameter_Map02Tiling);
	float Local29 = (FloatParameter_Map02UVNoiseMult * 0.01f);
	float Local30 = (Local17 * Local29);
	float2 Local31 = (Local28 + Local30);
	float2 Local32 = mad(Vector2Parameter_Map02Panner, Local27, Local31);
	float4 Local33 = Texture2DParameter_EmissiveMap02_DefaultWrapSampler.Sample(_DefaultWrapSampler, Local32);
	//[Local33] Get needed components
	float Local34 = Local33.x;
	float Local35 = pow(Local34, FloatParameter_Map02Contrast);
	float3 Local36 = (Local35 * Vector3Parameter_Map02ColorMult);
	float3 Local37 = (Local36 * FloatParameter_Map02EmissiveMult);
	float3 Local38 = (Local26 + Local37);
	float3 Local39 = pow(Local38, FloatParameter_EmissivePower);
	float3 Local40 = (Local10 + Local39);
	float3 Local41 = (Local2 * Local40);
	float Local42 = Vector4Parameter_Color.w;
	float Local43 = (Local24 * Local35);
	float Local44 = (global_Data.x * FloatParameter_FresnelPulseSpeed);
	float Local45 = ((((sin(Local44) * 0.5f) + 0.5f) * (FloatParameter_FresnelMax - FloatParameter_FresnelPower)) + FloatParameter_FresnelPower);
	float Local46 = pow((1.0f - saturate(dot(float3(0.0f, 1.0f, 0.0f), in_0))), Local45);
	float Local47 = (1.0f - Local46);
	float Local48 = lerp(Local46, Local47, FloatParameter_InverseFresnel);
	float Local49 = (Local43 * Local48);
	float Local50 = (Local49 * FloatParameter_Opacity);
	float Local51 = (Local42 * Local50);
	float Local52 = clamp(Local51, 0.0f, 1.0f);
	float3 Local53 = (Local41 * Local52);
	float3 Local54 = (Local1 * Local53);
	out_0 = Local54;
}

void CalculateMatNormal(SrtPsData srtData : S_SRT_DATA,
	float2 in_0,
	out float3 out_0)
{
	// Retrieve SRT data:
	@uniform(_DefaultWrapSampler);
	@uniform(Texture2DParameter_normalmap_DefaultWrapSampler);

	float4 Local0 = Texture2DParameter_normalmap_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Convert normalmaps to tangent space vectors
	Local0.xyzw = Local0.wzyx;
	Local0.xyz = ((Local0.xyz * 2.0f) - 1.0f);
	Local0.z = -(Local0.z);
	Local0.xyz = normalize(Local0.xyz);
	//[Local0] Get needed components
	float3 Local1 = Local0.xyz;
	out_0 = Local1;
}

void CalculateMatBaseColor(SrtPsData srtData : S_SRT_DATA,
	float2 in_0,
	out float3 out_0)
{
	// Retrieve SRT data:
	@uniform(Vector4Parameter_Color);
	@uniform(_DefaultWrapSampler);
	@uniform(Vector4Parameter_Color1);
	@uniform(Texture2DParameter_MSKskin_DefaultWrapSampler);
	@uniform(Vector4Parameter_Color2);
	@uniform(Vector4Parameter_Color3);
	@uniform(Texture2DParameter_MSKcloth_DefaultWrapSampler);
	@uniform(Vector4Parameter_Color4);
	@uniform(Vector4Parameter_Color5);
	@uniform(Texture2DParameter_basecolor_DefaultWrapSampler);

	float4 Local0 = Texture2DParameter_MSKskin_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float Local1 = Local0.x;
	float Local2 = Local0.y;
	float4 Local3 = (Vector4Parameter_Color1 * Local1);
	float4 Local4 = (Vector4Parameter_Color2 * Local2);
	float4 Local5 = (Local3 + Local4);
	float4 Local6 = Texture2DParameter_MSKcloth_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local6] Get needed components
	float Local7 = Local6.x;
	float Local8 = Local6.y;
	float Local9 = Local6.z;
	float4 Local10 = (Vector4Parameter_Color3 * Local7);
	float4 Local11 = (Local5 + Local10);
	float4 Local12 = (Vector4Parameter_Color4 * Local8);
	float4 Local13 = (Local11 + Local12);
	float4 Local14 = (Vector4Parameter_Color5 * Local9);
	float4 Local15 = (Local13 + Local14);
	float Local16 = (1.0f - Local1);
	float Local17 = (1.0f - Local2);
	float Local18 = (Local16 * Local17);
	float Local19 = (1.0f - Local7);
	float Local20 = (Local18 * Local19);
	float Local21 = (1.0f - Local8);
	float Local22 = (Local20 * Local21);
	float Local23 = (1.0f - Local9);
	float Local24 = (Local22 * Local23);
	float Local25 = pow(Local24, 2.2f);
	float4 Local26 = (Local15 + Local25);
	float3 Local27 = Local26.xyz;
	float4 Local28 = Texture2DParameter_basecolor_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local28] Get needed components
	float3 Local29 = Local28.xyz;
	float3 Local30 = (Local27 * Local29);
	out_0 = Local30;
}

void CalculateMatMetalMask(SrtPsData srtData : S_SRT_DATA,
	float2 in_0,
	out float out_0)
{
	// Retrieve SRT data:
	@uniform(_DefaultWrapSampler);
	@uniform(Texture2DParameter_physicalmap_DefaultWrapSampler);

	float4 Local0 = Texture2DParameter_physicalmap_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float Local1 = Local0.x;
	float Local2 = Local0.y;
	out_0 = Local1;
}

void CalculateMatReflectance(SrtPsData srtData : S_SRT_DATA,
	out float out_0)
{
	// Retrieve SRT data:
	@uniform(FloatParameter_Reflectance);

	out_0 = FloatParameter_Reflectance;
}

void CalculateMatRoughness(SrtPsData srtData : S_SRT_DATA,
	float2 in_0,
	out float out_0)
{
	// Retrieve SRT data:
	@uniform(_DefaultWrapSampler);
	@uniform(Texture2DParameter_physicalmap_DefaultWrapSampler);

	float4 Local0 = Texture2DParameter_physicalmap_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float Local1 = Local0.x;
	float Local2 = Local0.y;
	out_0 = Local2;
}

PixelOutput main(PixelInput In,
	SrtPsData srtData : S_SRT_DATA)
{
	// Retrieve SRT data:
	@uniform(global_LightPropertyMatrix);
	@uniform(global_FogPropertyMatrix);
	@uniform(global_Data);
	@uniform(_OpacityFade);

	PixelOutput Out;

	float3 matEmissiveColor;
	//Normalize World Normal
	float3 worldNormalNormalized = normalize(In.WorldNormal);

	//Normalize World Binormal
	float3 worldBinormalNormalized = normalize(In.WorldBinormal);

	//Normalize World Tangent
	float3 worldTangentNormalized = normalize(In.WorldTangent);

	row_major float3x3 NBT = row_major float3x3(worldTangentNormalized, worldNormalNormalized, worldBinormalNormalized);

	//Normalized world space view vector
	float3 worldViewNormalized = normalize(In.WorldView);

	//Calculate tangent space view vector
	float3 tangentView = mul(NBT, worldViewNormalized);

	CalculateMatEmissiveColor(srtData, tangentView, In.TexCoords0, matEmissiveColor);
	float3 matNormal;
	CalculateMatNormal(srtData, In.TexCoords0, matNormal);
	matNormal = normalize(mul(matNormal, NBT));

	float3 matBaseColor;
	CalculateMatBaseColor(srtData, In.TexCoords0, matBaseColor);
	float matMetalMask;
	CalculateMatMetalMask(srtData, In.TexCoords0, matMetalMask);
	float matReflectance;
	CalculateMatReflectance(srtData, matReflectance);
	matReflectance = RemapReflectance(matReflectance);
	float matRoughness;
	CalculateMatRoughness(srtData, In.TexCoords0, matRoughness);
	matRoughness = max(0.09f, matRoughness);
	float3 FinalColor = float3(0.0f, 0.0f, 0.0f);

	//Calculate Image Based Lighting
	float3 iblDiffuse;
	float3 iblSpecular;
	EvaluateDistantIBL(matBaseColor, matRoughness, float3(matReflectance, matReflectance, matReflectance), matMetalMask, matNormal, worldViewNormalized, iblDiffuse, iblSpecular, srtData);
	FinalColor = ((FinalColor + iblDiffuse) + iblSpecular);

	float3 LightDiffuseColorOut;
	float3 LightSpecularColorOut;
	DirectionLight(matNormal, worldViewNormalized, global_LightPropertyMatrix, matBaseColor, matReflectance, matRoughness, matMetalMask, LightDiffuseColorOut, LightSpecularColorOut);
	FinalColor = ((FinalColor + LightDiffuseColorOut) + LightSpecularColorOut);

	FinalColor = PreExpose(FinalColor, srtData);

	FinalColor = (FinalColor + (matEmissiveColor * !(bool)(global_Data.y)));

	FinalColor = lerp(global_FogPropertyMatrix[1].xyz, FinalColor, float3(In.HeightFog, In.HeightFog, In.HeightFog));
	FinalColor = lerp(global_FogPropertyMatrix[0].xyz, FinalColor, float3(In.DistanceFog, In.DistanceFog, In.DistanceFog));

	Out.Color0 = float4(FinalColor, _OpacityFade);
	Out.Color0 = max(Out.Color0, 0.0f);

	return Out;
}
