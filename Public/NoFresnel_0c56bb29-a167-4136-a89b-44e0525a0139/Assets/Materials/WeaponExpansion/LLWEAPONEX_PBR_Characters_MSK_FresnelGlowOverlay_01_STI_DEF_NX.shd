[Vertex shader]

#version 450
#extension GL_NV_gpu_shader5 : enable
#include "Shaders/NX/CommonHelpers.shdh"
#include "Shaders/GlobalConstants_NX.shdh"

layout(location = 0) in vec3 inPosition0;
layout(location = 10) in vec4 inColor1;
layout(location = 11) in vec4 inColor2;
layout(location = 12) in vec4 inColor3;
layout(location = 1) in vec4 inNormal0;
layout(location = 4) in vec2 inTexCoord0;

layout(location = 0) out gl_PerVertex
{
	vec4 gl_Position;
};
layout(location = 1) out vec4 Position0;
layout(location = 2) out vec3 TexCoord0;
layout(location = 3) out vec3 TexCoord1;
layout(location = 4) out vec3 TexCoord2;
layout(location = 5) out vec3 TexCoord3;
layout(location = 6) out vec2 TexCoords0;

void main()
{
	//Create Instance World Matrix
	vec4 col1 = vec4(inColor1.x, inColor1.y, inColor1.z, 0.0f);
	vec4 col2 = vec4(inColor1.w, inColor2.x, inColor2.y, 0.0f);
	vec4 col3 = vec4(inColor2.z, inColor2.w, inColor3.x, 0.0f);
	vec4 col4 = vec4(inColor3.y, inColor3.z, inColor3.w, 1.0f);
	mat4x4 WorldMatrix = mat4x4(col1, col2, col3, col4);

	//World space position
	vec4 worldPosition = (WorldMatrix * vec4(inPosition0, 1.0f));

	//Projected position
	vec4 projectedPosition = (global_ViewProjection * worldPosition);

	//Pass projected position to pixel shader
	Position0 = projectedPosition;

	//Compute local tangent frame
	mat3x3 LocalTangentFrame = GetTangentFrame(inNormal0);

	vec3 localNormal = LocalTangentFrame[2];

	//Normalize Local Normal
	vec3 localNormalNormalized = normalize(localNormal);

	//World space Normal
	vec3 worldNormal = (mat3x3(WorldMatrix[0].xyz, WorldMatrix[1].xyz, WorldMatrix[2].xyz) * localNormalNormalized);

	//Normalize World Normal
	vec3 worldNormalNormalized = normalize(worldNormal);

	TexCoord0 = worldNormalNormalized;

	vec3 LocalBinormal = LocalTangentFrame[1];

	//Normalize Local Binormal
	vec3 localBinormalNormalized = normalize(LocalBinormal);

	//World space Binormal
	vec3 worldBinormal = (mat3x3(WorldMatrix[0].xyz, WorldMatrix[1].xyz, WorldMatrix[2].xyz) * localBinormalNormalized);

	//Normalize World Binormal
	vec3 worldBinormalNormalized = normalize(worldBinormal);

	TexCoord1 = worldBinormalNormalized;

	vec3 LocalTangent = LocalTangentFrame[0];

	//Normalize Local Tangent
	vec3 localTangentNormalized = normalize(LocalTangent);

	//World space Tangent
	vec3 worldTangent = (mat3x3(WorldMatrix[0].xyz, WorldMatrix[1].xyz, WorldMatrix[2].xyz) * localTangentNormalized);

	//Normalize World Tangent
	vec3 worldTangentNormalized = normalize(worldTangent);

	TexCoord2 = worldTangentNormalized;

	//World space view vector
	vec3 worldView = (global_ViewPos.xyz - worldPosition.xyz);

	TexCoord3 = worldView;

	TexCoords0 = inTexCoord0;
	gl_Position = Position0;
}


[Fragment shader]

#version 450
#extension GL_NV_gpu_shader5 : enable
#include "Shaders/NX/CommonHelpers.shdh"
#include "Shaders/GlobalConstants_PS_NX.shdh"
#include "Shaders/NX/PBR.shdh"

layout(location = 1) in vec4 Position0;
layout(location = 2) in vec3 TexCoord0;
layout(location = 3) in vec3 TexCoord1;
layout(location = 4) in vec3 TexCoord2;
layout(location = 5) in vec3 TexCoord3;
layout(location = 6) in vec2 TexCoords0;

layout(location = 0) out vec4 outColor0;
layout(location = 1) out vec4 outColor1;
layout(location = 2) out vec4 outColor2;
layout(location = 3) out vec4 outColor3;

layout(binding = 0) uniform sampler2D Texture2DParameter_9dc5807b36974b8fab0fb9c5c1bd7010_DefaultWrapSampler;
layout(binding = 1) uniform sampler2D Texture2DParameter_WorldPositionColorMap_DefaultWrapSampler;
layout(binding = 2) uniform sampler2D Texture2DParameter_UVNoiseMap_DefaultWrapSampler;
layout(binding = 3) uniform sampler2D Texture2DParameter_EmissiveMap01_DefaultWrapSampler;
layout(binding = 4) uniform sampler2D Texture2DParameter_EmissiveMap02_DefaultWrapSampler;
layout(binding = 5) uniform sampler2D Texture2DParameter_normalmap_DefaultWrapSampler;
layout(binding = 6) uniform sampler2D Texture2DParameter_MSKskin_DefaultWrapSampler;
layout(binding = 7) uniform sampler2D Texture2DParameter_MSKcloth_DefaultWrapSampler;
layout(binding = 8) uniform sampler2D Texture2DParameter_basecolor_DefaultWrapSampler;
layout(binding = 9) uniform sampler2D Texture2DParameter_physicalmap_DefaultWrapSampler;
layout(binding = 0, std140) uniform PGlobals
{
	float FloatParameter_Speed;
	float FloatParameter_PulseMin;
	float FloatParameter_PulseMax;
	vec4 Vector4Parameter_Color;
	float FloatParameter_RainbowFresnelStrength;
	float FloatParameter_AddedColorRepeat;
	float FloatParameter_RainbowColourStrength;
	float FloatParameter_Map01EmissiveMult;
	vec2 Vector2Parameter_Map01Panner;
	vec2 Vector2Parameter_Map01Tiling;
	vec2 Vector2Parameter_UVNoisePanner;
	vec2 Vector2Parameter_UVNoiseTiling;
	float FloatParameter_Map01UVNoiseMult;
	float FloatParameter_Map01Contrast;
	vec3 Vector3Parameter_Map01ColorMult;
	vec2 Vector2Parameter_Map02Panner;
	vec2 Vector2Parameter_Map02Tiling;
	float FloatParameter_Map02UVNoiseMult;
	float FloatParameter_Map02Contrast;
	vec3 Vector3Parameter_Map02ColorMult;
	float FloatParameter_Map02EmissiveMult;
	float FloatParameter_EmissivePower;
	float FloatParameter_FresnelPulseSpeed;
	float FloatParameter_FresnelPower;
	float FloatParameter_FresnelMax;
	float FloatParameter_InverseFresnel;
	float FloatParameter_Opacity;
	vec4 Vector4Parameter_Color1;
	vec4 Vector4Parameter_Color2;
	vec4 Vector4Parameter_Color3;
	vec4 Vector4Parameter_Color4;
	vec4 Vector4Parameter_Color5;
	float FloatParameter_Reflectance;
	float _OpacityFade;
};

void CalculateMatEmissiveColor(vec3 in_0,
	vec2 in_1,
	out vec3 out_0)
{
	float Local0 = (global_Data.x * FloatParameter_Speed);
	float Local1 = ((((sin(Local0) * 0.5f) + 0.5f) * (FloatParameter_PulseMax - FloatParameter_PulseMin)) + FloatParameter_PulseMin);
	vec3 Local2 = Vector4Parameter_Color.xyz;
	float Local3 = pow((1.0f - clamp(dot(vec3(0.0f, 1.0f, 0.0f), in_0), 0, 1)), FloatParameter_RainbowFresnelStrength);
	vec2 Local4 = (in_1 * FloatParameter_AddedColorRepeat);
	vec4 Local5 = texture(Texture2DParameter_9dc5807b36974b8fab0fb9c5c1bd7010_DefaultWrapSampler, (Local4 + (vec2(0.05f, 0.03f) * global_Data.x)));
	//[Local5] Get needed components
	float Local6 = Local5.x;
	vec4 Local7 = texture(Texture2DParameter_WorldPositionColorMap_DefaultWrapSampler, vec2(Local6, Local6));
	//[Local7] Get needed components
	vec3 Local8 = Local7.xyz;
	vec3 Local9 = (Local8 * FloatParameter_RainbowColourStrength);
	vec3 Local10 = (Local3 * Local9);
	float Local11 = (global_Data.x * 0.1f);
	vec2 Local12 = (in_1 * Vector2Parameter_Map01Tiling);
	vec2 Local13 = (in_1 * Vector2Parameter_UVNoiseTiling);
	vec2 Local14 = fma(Vector2Parameter_UVNoisePanner, vec2(global_Data.x), Local13);
	vec4 Local15 = texture(Texture2DParameter_UVNoiseMap_DefaultWrapSampler, Local14);
	//[Local15] Get needed components
	float Local16 = Local15.x;
	float Local17 = fma(Local16, 2.0f, -1.0f);
	float Local18 = (FloatParameter_Map01UVNoiseMult * 0.01f);
	float Local19 = (Local17 * Local18);
	vec2 Local20 = (Local12 + vec2(Local19));
	vec2 Local21 = fma(Vector2Parameter_Map01Panner, vec2(Local11), Local20);
	vec4 Local22 = texture(Texture2DParameter_EmissiveMap01_DefaultWrapSampler, Local21);
	//[Local22] Get needed components
	float Local23 = Local22.x;
	float Local24 = pow(Local23, FloatParameter_Map01Contrast);
	vec3 Local25 = (Local24 * Vector3Parameter_Map01ColorMult);
	vec3 Local26 = (FloatParameter_Map01EmissiveMult * Local25);
	float Local27 = (global_Data.x * 0.1f);
	vec2 Local28 = (in_1 * Vector2Parameter_Map02Tiling);
	float Local29 = (FloatParameter_Map02UVNoiseMult * 0.01f);
	float Local30 = (Local17 * Local29);
	vec2 Local31 = (Local28 + vec2(Local30));
	vec2 Local32 = fma(Vector2Parameter_Map02Panner, vec2(Local27), Local31);
	vec4 Local33 = texture(Texture2DParameter_EmissiveMap02_DefaultWrapSampler, Local32);
	//[Local33] Get needed components
	float Local34 = Local33.x;
	float Local35 = pow(Local34, FloatParameter_Map02Contrast);
	vec3 Local36 = (Local35 * Vector3Parameter_Map02ColorMult);
	vec3 Local37 = (Local36 * FloatParameter_Map02EmissiveMult);
	vec3 Local38 = (Local26 + Local37);
	vec3 Local39 = pow(Local38, vec3(FloatParameter_EmissivePower, FloatParameter_EmissivePower, FloatParameter_EmissivePower));
	vec3 Local40 = (Local10 + Local39);
	vec3 Local41 = (Local2 * Local40);
	float Local42 = Vector4Parameter_Color.w;
	float Local43 = (Local24 * Local35);
	float Local44 = (global_Data.x * FloatParameter_FresnelPulseSpeed);
	float Local45 = ((((sin(Local44) * 0.5f) + 0.5f) * (FloatParameter_FresnelMax - FloatParameter_FresnelPower)) + FloatParameter_FresnelPower);
	float Local46 = pow((1.0f - clamp(dot(vec3(0.0f, 1.0f, 0.0f), in_0), 0, 1)), Local45);
	float Local47 = (1.0f - Local46);
	float Local48 = mix(Local46, Local47, FloatParameter_InverseFresnel);
	float Local49 = (Local43 * Local48);
	float Local50 = (Local49 * FloatParameter_Opacity);
	float Local51 = (Local42 * Local50);
	float Local52 = clamp(Local51, 0.0f, 1.0f);
	vec3 Local53 = (Local41 * Local52);
	vec3 Local54 = (Local1 * Local53);
	out_0 = Local54;
}

void CalculateMatNormal(vec2 in_0,
	out vec3 out_0)
{
	vec4 Local0 = texture(Texture2DParameter_normalmap_DefaultWrapSampler, in_0);
	//[Local0] Convert normalmaps to tangent space vectors
	Local0.xyzw = Local0.wzyx;
	Local0.xyz = ((Local0.xyz * 2.0f) - vec3(1.0f));
	Local0.z = -(Local0.z);
	Local0.xyz = normalize(Local0.xyz);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	out_0 = Local1;
}

void CalculateMatBaseColor(vec2 in_0,
	out vec3 out_0)
{
	vec4 Local0 = texture(Texture2DParameter_MSKskin_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float Local1 = Local0.x;
	float Local2 = Local0.y;
	vec4 Local3 = (Vector4Parameter_Color1 * Local1);
	vec4 Local4 = (Vector4Parameter_Color2 * Local2);
	vec4 Local5 = (Local3 + Local4);
	vec4 Local6 = texture(Texture2DParameter_MSKcloth_DefaultWrapSampler, in_0);
	//[Local6] Get needed components
	float Local7 = Local6.x;
	float Local8 = Local6.y;
	float Local9 = Local6.z;
	vec4 Local10 = (Vector4Parameter_Color3 * Local7);
	vec4 Local11 = (Local5 + Local10);
	vec4 Local12 = (Vector4Parameter_Color4 * Local8);
	vec4 Local13 = (Local11 + Local12);
	vec4 Local14 = (Vector4Parameter_Color5 * Local9);
	vec4 Local15 = (Local13 + Local14);
	float Local16 = (1.0f - Local1);
	float Local17 = (1.0f - Local2);
	float Local18 = (Local16 * Local17);
	float Local19 = (1.0f - Local7);
	float Local20 = (Local18 * Local19);
	float Local21 = (1.0f - Local8);
	float Local22 = (Local20 * Local21);
	float Local23 = (1.0f - Local9);
	float Local24 = (Local22 * Local23);
	float Local25 = pow(Local24, 2.2f);
	vec4 Local26 = (Local15 + vec4(Local25));
	vec3 Local27 = Local26.xyz;
	vec4 Local28 = texture(Texture2DParameter_basecolor_DefaultWrapSampler, in_0);
	//[Local28] Get needed components
	vec3 Local29 = Local28.xyz;
	vec3 Local30 = (Local27 * Local29);
	out_0 = Local30;
}

void CalculateMatMetalMask(vec2 in_0,
	out float out_0)
{
	vec4 Local0 = texture(Texture2DParameter_physicalmap_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float Local1 = Local0.x;
	float Local2 = Local0.y;
	out_0 = Local1;
}

void CalculateMatReflectance(out float out_0)
{
	out_0 = FloatParameter_Reflectance;
}

void CalculateMatRoughness(vec2 in_0,
	out float out_0)
{
	vec4 Local0 = texture(Texture2DParameter_physicalmap_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float Local1 = Local0.x;
	float Local2 = Local0.y;
	out_0 = Local2;
}

void main()
{
	vec3 matEmissiveColor;
	//Normalize World Normal
	vec3 worldNormalNormalized = normalize(TexCoord0);

	//Normalize World Binormal
	vec3 worldBinormalNormalized = normalize(TexCoord1);

	//Normalize World Tangent
	vec3 worldTangentNormalized = normalize(TexCoord2);

	mat3x3 NBT = mat3x3(vec3(worldTangentNormalized.x, worldNormalNormalized.x, worldBinormalNormalized.x), vec3(worldTangentNormalized.y, worldNormalNormalized.y, worldBinormalNormalized.y), vec3(worldTangentNormalized.z, worldNormalNormalized.z, worldBinormalNormalized.z));

	//Normalized world space view vector
	vec3 worldViewNormalized = normalize(TexCoord3);

	//Calculate tangent space view vector
	vec3 tangentView = (NBT * worldViewNormalized);

	CalculateMatEmissiveColor(tangentView, TexCoords0, matEmissiveColor);
	vec3 matNormal;
	CalculateMatNormal(TexCoords0, matNormal);
	matNormal = (mat3x3(global_View[0].xyz, global_View[1].xyz, global_View[2].xyz) * normalize((matNormal * NBT)));

	vec3 matBaseColor;
	CalculateMatBaseColor(TexCoords0, matBaseColor);
	float matMetalMask;
	CalculateMatMetalMask(TexCoords0, matMetalMask);
	float matReflectance;
	CalculateMatReflectance(matReflectance);
	float matRoughness;
	CalculateMatRoughness(TexCoords0, matRoughness);
	GBufferData gBufferData;
	gBufferData.Emissive = matEmissiveColor;
	gBufferData.ViewSpaceNormal = matNormal;
	gBufferData.BaseColor = matBaseColor;
	gBufferData.FadeOpacity = _OpacityFade;
	gBufferData.Roughness = matRoughness;
	gBufferData.Reflectance = matReflectance;
	gBufferData.MetalMask = matMetalMask;
	gBufferData.FXEmissive = true;
	gBufferData.ShadingModel = 0;
	gBufferData.Custom = vec4(0.0f, 0.0f, 0.0f, 0.0f);
	EncodeGBufferData(gBufferData, outColor0, outColor1, outColor2, outColor3);
}
