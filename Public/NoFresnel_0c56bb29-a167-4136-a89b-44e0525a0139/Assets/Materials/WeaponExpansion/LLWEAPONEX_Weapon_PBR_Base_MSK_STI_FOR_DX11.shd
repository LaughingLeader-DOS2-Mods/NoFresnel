[Vertex shader]


#include "Shaders/DX11/CommonHelpers.shdh"
#include "Shaders/GlobalConstants_DX11.shdh"

struct VertexInput
{
	float3 Position : POSITION0;
	float4 InstanceMatrix1 : COLOR1;
	float4 InstanceMatrix2 : COLOR2;
	float4 InstanceMatrix3 : COLOR3;
	float2 TexCoords0 : TEXCOORD0;
	float4 LocalQTangent : NORMAL0;
};

struct VertexOutput
{
	float4 ProjectedPosition : SV_Position0;
	float2 TexCoords0 : TEXCOORD0;
	float3 WorldNormal : TEXCOORD1;
	float3 WorldBinormal : TEXCOORD2;
	float3 WorldTangent : TEXCOORD3;
	float3 WorldView : TEXCOORD4;
	float HeightFog : TEXCOORD5;
	float DistanceFog : TEXCOORD6;
};

VertexOutput main(VertexInput In)
{
	VertexOutput Out;

	//Create Instance World Matrix
	float4 row1 = float4(In.InstanceMatrix1.x, In.InstanceMatrix1.w, In.InstanceMatrix2.z, In.InstanceMatrix3.y);
	float4 row2 = float4(In.InstanceMatrix1.y, In.InstanceMatrix2.x, In.InstanceMatrix2.w, In.InstanceMatrix3.z);
	float4 row3 = float4(In.InstanceMatrix1.z, In.InstanceMatrix2.y, In.InstanceMatrix3.x, In.InstanceMatrix3.w);
	float4 row4 = float4(0.0f, 0.0f, 0.0f, 1.0f);
	row_major float4x4 WorldMatrix = float4x4(row1, row2, row3, row4);

	//World space position
	float4 worldPosition = mul(WorldMatrix, float4(In.Position, 1.0f));

	//Projected position
	float4 projectedPosition = mul(global_ViewProjection, worldPosition);

	//Pass projected position to pixel shader
	Out.ProjectedPosition = projectedPosition;

	Out.TexCoords0 = In.TexCoords0;
	//Compute local tangent frame
	row_major float3x3 LocalTangentFrame = GetTangentFrame(In.LocalQTangent);

	float3 LocalNormal = LocalTangentFrame[2];

	//Normalize Local Normal
	float3 localNormalNormalized = normalize(LocalNormal);

	//World space Normal
	float3 worldNormal = mul((float3x3)(WorldMatrix), localNormalNormalized);

	//Normalize World Normal
	float3 worldNormalNormalized = normalize(worldNormal);

	Out.WorldNormal = worldNormalNormalized;

	float3 LocalBinormal = LocalTangentFrame[1];

	//Normalize Local Binormal
	float3 localBinormalNormalized = normalize(LocalBinormal);

	//World space Binormal
	float3 worldBinormal = mul((float3x3)(WorldMatrix), localBinormalNormalized);

	//Normalize World Binormal
	float3 worldBinormalNormalized = normalize(worldBinormal);

	Out.WorldBinormal = worldBinormalNormalized;

	float3 LocalTangent = LocalTangentFrame[0];

	//Normalize Local Tangent
	float3 localTangentNormalized = normalize(LocalTangent);

	//World space Tangent
	float3 worldTangent = mul((float3x3)(WorldMatrix), localTangentNormalized);

	//Normalize World Tangent
	float3 worldTangentNormalized = normalize(worldTangent);

	Out.WorldTangent = worldTangentNormalized;

	//World space view vector
	float3 worldView = (global_ViewPos.xyz - worldPosition.xyz);

	Out.WorldView = worldView;

	//Calculate Height Fog
	float depthValue = saturate(((global_FogPropertyMatrix[3].y - length(worldView)) / (global_FogPropertyMatrix[3].y - global_FogPropertyMatrix[3].x)));
	float heightDensity = ((worldPosition.y - global_FogPropertyMatrix[2].z) / global_FogPropertyMatrix[3].z);
	float heightFog = saturate(max(depthValue, heightDensity));

	Out.HeightFog = heightFog;

	//Calculate Distance Fog
	float distanceFog = saturate(((global_FogPropertyMatrix[2].y - length(worldView)) / (global_FogPropertyMatrix[2].y - global_FogPropertyMatrix[2].x)));

	Out.DistanceFog = distanceFog;


	return Out;
}


[Fragment shader]


#include "Shaders/DX11/CommonHelpers.shdh"
#include "Shaders/DX11/PBR.shdh"
#include "Shaders/DX11/Exposure.shdh"
#include "Shaders/DX11/ImageBasedLightingHelpers.shdh"
#include "Shaders/GlobalConstants_PS_DX11.shdh"

struct PixelInput
{
	float4 ProjectedPosition : SV_Position0;
	float2 TexCoords0 : TEXCOORD0;
	float3 WorldNormal : TEXCOORD1;
	float3 WorldBinormal : TEXCOORD2;
	float3 WorldTangent : TEXCOORD3;
	float3 WorldView : TEXCOORD4;
	float HeightFog : TEXCOORD5;
	float DistanceFog : TEXCOORD6;
};

struct PixelOutput
{
	float4 Color0 : SV_Target0;
};

uniform float _OpacityFade;
uniform float FloatParameter_NormalMapEnabled;
uniform SamplerState _DefaultWrapSampler;
uniform Texture2D Texture2DParameter_NormalMap_DefaultWrapSampler;
uniform float4 Vector4Parameter_Color3;
uniform Texture2D Texture2DParameter_MSKcloth_DefaultWrapSampler;
uniform float4 Vector4Parameter_Color4;
uniform float4 Vector4Parameter_Color5;
uniform Texture2D Texture2DParameter_basecolor_DefaultWrapSampler;
uniform float FloatParameter_PhysicalMapEnabled;
uniform Texture2D Texture2DParameter_PhysicalMap_DefaultWrapSampler;
uniform float FloatParameter_MetalMaskManual;
uniform float FloatParameter_ReflectanceManual;
uniform float FloatParameter_RoughnessManual;

void CalculateMatNormal(float2 in_0,
	out float3 out_0)
{
	float4 Local0 = float4(0.0f, 0.0f, 0.0f, 0.0f);
	if((FloatParameter_NormalMapEnabled > 0.0f))
	{
		float4 Local1 = Texture2DParameter_NormalMap_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
		//[Local1] Convert normalmaps to tangent space vectors
		Local1.xyzw = Local1.wzyx;
		Local1.xyz = ((Local1.xyz * 2.0f) - 1.0f);
		Local1.z = -(Local1.z);
		Local1.xyz = normalize(Local1.xyz);
		//[Local1] Get needed components
		float3 Local2 = Local1.xyz;
		Local0.xyz = Local2;
	}
	float3 Local3 = Local0.xyz;
	out_0 = Local3;
}

void CalculateMatBaseColor(float2 in_0,
	out float3 out_0)
{
	float4 Local0 = Texture2DParameter_MSKcloth_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float Local1 = Local0.x;
	float Local2 = Local0.y;
	float Local3 = Local0.z;
	float4 Local4 = (Vector4Parameter_Color3 * Local1);
	float4 Local5 = (Vector4Parameter_Color4 * Local2);
	float4 Local6 = (Local4 + Local5);
	float4 Local7 = (Vector4Parameter_Color5 * Local3);
	float4 Local8 = (Local6 + Local7);
	float Local9 = (1.0f - Local1);
	float Local10 = (1.0f - Local2);
	float Local11 = (Local9 * Local10);
	float Local12 = (1.0f - Local3);
	float Local13 = (Local11 * Local12);
	float Local14 = pow(Local13, 2.2f);
	float4 Local15 = (Local8 + Local14);
	float3 Local16 = Local15.xyz;
	float4 Local17 = Texture2DParameter_basecolor_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local17] Get needed components
	float3 Local18 = Local17.xyz;
	float3 Local19 = (Local16 * Local18);
	out_0 = Local19;
}

void CalculateMatMetalMask(float2 in_0,
	out float out_0)
{
	float4 Local0 = float4(0.0f, 0.0f, 0.0f, 0.0f);
	if((FloatParameter_PhysicalMapEnabled > 0.0f))
	{
		float4 Local1 = Texture2DParameter_PhysicalMap_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
		//[Local1] Get needed components
		float Local2 = Local1.x;
		float Local3 = Local1.y;
		Local0 = float4(Local2, Local2, Local2, Local2);
	}
	else if((FloatParameter_PhysicalMapEnabled == 0.0f))
	{
		Local0 = float4(FloatParameter_MetalMaskManual, FloatParameter_MetalMaskManual, FloatParameter_MetalMaskManual, FloatParameter_MetalMaskManual);
	}
	float Local4 = Local0.x;
	out_0 = Local4;
}

void CalculateMatReflectance(out float out_0)
{
	float4 Local0 = float4(0.0f, 0.0f, 0.0f, 0.0f);
	if((0.0f == 0.0f))
	{
		Local0 = float4(FloatParameter_ReflectanceManual, FloatParameter_ReflectanceManual, FloatParameter_ReflectanceManual, FloatParameter_ReflectanceManual);
	}
	float Local1 = Local0.x;
	out_0 = Local1;
}

void CalculateMatRoughness(float2 in_0,
	out float out_0)
{
	float4 Local0 = float4(0.0f, 0.0f, 0.0f, 0.0f);
	if((FloatParameter_PhysicalMapEnabled > 0.0f))
	{
		float4 Local1 = Texture2DParameter_PhysicalMap_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
		//[Local1] Get needed components
		float Local2 = Local1.x;
		float Local3 = Local1.y;
		Local0 = float4(Local3, Local3, Local3, Local3);
	}
	else if((FloatParameter_PhysicalMapEnabled == 0.0f))
	{
		Local0 = float4(FloatParameter_RoughnessManual, FloatParameter_RoughnessManual, FloatParameter_RoughnessManual, FloatParameter_RoughnessManual);
	}
	float Local4 = Local0.x;
	out_0 = Local4;
}

PixelOutput main(PixelInput In)
{
	PixelOutput Out;

	float3 matNormal;
	CalculateMatNormal(In.TexCoords0, matNormal);
	//Normalize World Normal
	float3 worldNormalNormalized = normalize(In.WorldNormal);

	//Normalize World Binormal
	float3 worldBinormalNormalized = normalize(In.WorldBinormal);

	//Normalize World Tangent
	float3 worldTangentNormalized = normalize(In.WorldTangent);

	row_major float3x3 NBT = float3x3(worldTangentNormalized, worldNormalNormalized, worldBinormalNormalized);

	matNormal = normalize(mul(matNormal, NBT));

	float3 matBaseColor;
	CalculateMatBaseColor(In.TexCoords0, matBaseColor);
	float matMetalMask;
	CalculateMatMetalMask(In.TexCoords0, matMetalMask);
	float matReflectance;
	CalculateMatReflectance(matReflectance);
	matReflectance = RemapReflectance(matReflectance);
	float matRoughness;
	CalculateMatRoughness(In.TexCoords0, matRoughness);
	matRoughness = max(0.09f, matRoughness);
	float3 FinalColor = float3(0.0f, 0.0f, 0.0f);

	//Calculate Image Based Lighting
	//Normalized world space view vector
	float3 worldViewNormalized = normalize(In.WorldView);

	float3 iblDiffuse;
	float3 iblSpecular;
	EvaluateDistantIBL(matBaseColor, matRoughness, float3(matReflectance, matReflectance, matReflectance), matMetalMask, matNormal, worldViewNormalized, iblDiffuse, iblSpecular);
	FinalColor = ((FinalColor + iblDiffuse) + iblSpecular);

	float3 LightDiffuseColorOut;
	float3 LightSpecularColorOut;
	DirectionLight(matNormal, worldViewNormalized, global_LightPropertyMatrix, matBaseColor, matReflectance, matRoughness, matMetalMask, LightDiffuseColorOut, LightSpecularColorOut);
	FinalColor = ((FinalColor + LightDiffuseColorOut) + LightSpecularColorOut);

	FinalColor = PreExpose(FinalColor);

	FinalColor = lerp(global_FogPropertyMatrix[1].xyz, FinalColor, float3(In.HeightFog, In.HeightFog, In.HeightFog));
	FinalColor = lerp(global_FogPropertyMatrix[0].xyz, FinalColor, float3(In.DistanceFog, In.DistanceFog, In.DistanceFog));

	Out.Color0 = float4(FinalColor, _OpacityFade);
	Out.Color0 = max(Out.Color0, 0.0f);

	return Out;
}
