[Vertex shader]

#version 450
#extension GL_NV_gpu_shader5 : enable
#include "Shaders/NX/CommonHelpers.shdh"
#include "Shaders/GlobalConstants_NX.shdh"

layout(location = 0) in vec3 inPosition0;
layout(location = 10) in vec4 inColor1;
layout(location = 11) in vec4 inColor2;
layout(location = 12) in vec4 inColor3;
layout(location = 4) in vec2 inTexCoord0;
layout(location = 1) in vec4 inNormal0;

layout(location = 0) out gl_PerVertex
{
	vec4 gl_Position;
};
layout(location = 1) out vec4 Position0;
layout(location = 2) out vec2 TexCoord0;
layout(location = 3) out vec3 TexCoord1;
layout(location = 4) out vec3 TexCoord2;
layout(location = 5) out vec3 TexCoord3;
layout(location = 6) out vec3 WorldView;
layout(location = 7) out float HeightFog;
layout(location = 8) out float DistanceFog;

void main()
{
	//Create Instance World Matrix
	vec4 col1 = vec4(inColor1.x, inColor1.y, inColor1.z, 0.0f);
	vec4 col2 = vec4(inColor1.w, inColor2.x, inColor2.y, 0.0f);
	vec4 col3 = vec4(inColor2.z, inColor2.w, inColor3.x, 0.0f);
	vec4 col4 = vec4(inColor3.y, inColor3.z, inColor3.w, 1.0f);
	mat4x4 WorldMatrix = mat4x4(col1, col2, col3, col4);

	//World space position
	vec4 worldPosition = (WorldMatrix * vec4(inPosition0, 1.0f));

	//Projected position
	vec4 projectedPosition = (global_ViewProjection * worldPosition);

	//Pass projected position to pixel shader
	Position0 = projectedPosition;

	TexCoord0 = inTexCoord0;
	//Compute local tangent frame
	mat3x3 LocalTangentFrame = GetTangentFrame(inNormal0);

	vec3 localNormal = LocalTangentFrame[2];

	//Normalize Local Normal
	vec3 localNormalNormalized = normalize(localNormal);

	//World space Normal
	vec3 worldNormal = (mat3x3(WorldMatrix[0].xyz, WorldMatrix[1].xyz, WorldMatrix[2].xyz) * localNormalNormalized);

	//Normalize World Normal
	vec3 worldNormalNormalized = normalize(worldNormal);

	TexCoord1 = worldNormalNormalized;

	vec3 LocalBinormal = LocalTangentFrame[1];

	//Normalize Local Binormal
	vec3 localBinormalNormalized = normalize(LocalBinormal);

	//World space Binormal
	vec3 worldBinormal = (mat3x3(WorldMatrix[0].xyz, WorldMatrix[1].xyz, WorldMatrix[2].xyz) * localBinormalNormalized);

	//Normalize World Binormal
	vec3 worldBinormalNormalized = normalize(worldBinormal);

	TexCoord2 = worldBinormalNormalized;

	vec3 LocalTangent = LocalTangentFrame[0];

	//Normalize Local Tangent
	vec3 localTangentNormalized = normalize(LocalTangent);

	//World space Tangent
	vec3 worldTangent = (mat3x3(WorldMatrix[0].xyz, WorldMatrix[1].xyz, WorldMatrix[2].xyz) * localTangentNormalized);

	//Normalize World Tangent
	vec3 worldTangentNormalized = normalize(worldTangent);

	TexCoord3 = worldTangentNormalized;

	//World space view vector
	vec3 worldView = (global_ViewPos.xyz - worldPosition.xyz);

	WorldView = worldView;

	//Calculate Height Fog
	float depthValue = clamp(((global_FogPropertyMatrix[3].y - length(worldView)) / (global_FogPropertyMatrix[3].y - global_FogPropertyMatrix[3].x)), 0, 1);
	float heightDensity = ((worldPosition.y - global_FogPropertyMatrix[2].z) / global_FogPropertyMatrix[3].z);
	float heightFog = clamp(max(depthValue, heightDensity), 0, 1);

	HeightFog = heightFog;

	//Calculate Distance Fog
	float distanceFog = clamp(((global_FogPropertyMatrix[2].y - length(worldView)) / (global_FogPropertyMatrix[2].y - global_FogPropertyMatrix[2].x)), 0, 1);

	DistanceFog = distanceFog;

	gl_Position = Position0;
}


[Fragment shader]

#version 450
#extension GL_NV_gpu_shader5 : enable
#include "Shaders/NX/CommonHelpers.shdh"
#include "Shaders/GlobalConstants_PS_NX.shdh"
#include "Shaders/NX/PBR.shdh"
#include "Shaders/NX/Exposure.shdh"
#include "Shaders/NX/ImageBasedLightingHelpers.shdh"

layout(location = 1) in vec4 Position0;
layout(location = 2) in vec2 TexCoord0;
layout(location = 3) in vec3 TexCoord1;
layout(location = 4) in vec3 TexCoord2;
layout(location = 5) in vec3 TexCoord3;
layout(location = 6) in vec3 WorldView;
layout(location = 7) in float HeightFog;
layout(location = 8) in float DistanceFog;

layout(location = 0) out vec4 outColor0;

layout(binding = 0) uniform sampler2D Texture2DParameter_basecolor_DefaultWrapSampler;
layout(binding = 1) uniform sampler2D Texture2DParameter_Glowmap_DefaultWrapSampler;
layout(binding = 2) uniform sampler2D Texture2DParameter_PanningNoise_DefaultWrapSampler;
layout(binding = 3) uniform sampler2D Texture2DParameter_9dc5807b36974b8fab0fb9c5c1bd7010_DefaultWrapSampler;
layout(binding = 4) uniform sampler2D Texture2DParameter_WorldPositionColorMap_DefaultWrapSampler;
layout(binding = 5) uniform sampler2D Texture2DParameter_normalmap_DefaultWrapSampler;
layout(binding = 6) uniform sampler2D Texture2DParameter_physicalmap_DefaultWrapSampler;
layout(binding = 0, std140) uniform PGlobals
{
	float _OpacityFade;
	vec3 Vector3Parameter_GlowColor;
	vec2 Vector2Parameter_XYPanningSpeeds;
	float FloatParameter_GlowMultiplier;
	float FloatParameter_AddedColorRepeat;
	float FloatParameter_AddWordPositionColor;
	float FloatParameter_Reflectance;
};

void CalculateMatOpacity(vec2 in_0,
	out float out_0)
{
	vec4 Local0 = texture(Texture2DParameter_basecolor_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	float Local2 = Local0.w;
	out_0 = Local2;
}

void CalculateMatEmissiveColor(vec2 in_0,
	vec3 in_1,
	out vec3 out_0)
{
	vec4 Local0 = texture(Texture2DParameter_Glowmap_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float Local1 = Local0.x;
	vec3 Local2 = (Vector3Parameter_GlowColor * Local1);
	vec2 Local3 = fma(vec2(global_Data.x), Vector2Parameter_XYPanningSpeeds, in_0);
	vec4 Local4 = texture(Texture2DParameter_PanningNoise_DefaultWrapSampler, Local3);
	//[Local4] Get needed components
	float Local5 = Local4.x;
	float Local6 = (Local5 * FloatParameter_GlowMultiplier);
	vec3 Local7 = (Local2 * Local6);
	vec2 Local8 = (in_0 * FloatParameter_AddedColorRepeat);
	vec4 Local9 = texture(Texture2DParameter_9dc5807b36974b8fab0fb9c5c1bd7010_DefaultWrapSampler, (Local8 + (vec2(0.05f, 0.03f) * global_Data.x)));
	//[Local9] Get needed components
	float Local10 = Local9.x;
	vec4 Local11 = texture(Texture2DParameter_WorldPositionColorMap_DefaultWrapSampler, vec2(Local10, Local10));
	//[Local11] Get needed components
	vec3 Local12 = Local11.xyz;
	vec3 Local13 = (Local12 * FloatParameter_AddWordPositionColor);
	vec4 Local14 = texture(Texture2DParameter_normalmap_DefaultWrapSampler, in_0);
	//[Local14] Convert normalmaps to tangent space vectors
	Local14.xyzw = Local14.wzyx;
	Local14.xyz = ((Local14.xyz * 2.0f) - vec3(1.0f));
	Local14.z = -(Local14.z);
	Local14.xyz = normalize(Local14.xyz);
	//[Local14] Get needed components
	vec3 Local15 = Local14.xyz;
	float Local16 = pow((1.0f - clamp(dot(Local15, in_1), 0, 1)), 2.0f);
	vec3 Local17 = (Local13 * Local16);
	vec3 Local18 = (Local17 * 3.0f);
	vec3 Local19 = (Local18 / 2.0f);
	vec3 Local20 = (Local7 + Local19);
	out_0 = Local20;
}

void CalculateMatNormal(vec2 in_0,
	out vec3 out_0)
{
	vec4 Local0 = texture(Texture2DParameter_normalmap_DefaultWrapSampler, in_0);
	//[Local0] Convert normalmaps to tangent space vectors
	Local0.xyzw = Local0.wzyx;
	Local0.xyz = ((Local0.xyz * 2.0f) - vec3(1.0f));
	Local0.z = -(Local0.z);
	Local0.xyz = normalize(Local0.xyz);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	out_0 = Local1;
}

void CalculateMatBaseColor(vec2 in_0,
	vec3 in_1,
	out vec3 out_0)
{
	vec2 Local0 = (in_0 * FloatParameter_AddedColorRepeat);
	vec4 Local1 = texture(Texture2DParameter_9dc5807b36974b8fab0fb9c5c1bd7010_DefaultWrapSampler, (Local0 + (vec2(0.05f, 0.03f) * global_Data.x)));
	//[Local1] Get needed components
	float Local2 = Local1.x;
	vec4 Local3 = texture(Texture2DParameter_WorldPositionColorMap_DefaultWrapSampler, vec2(Local2, Local2));
	//[Local3] Get needed components
	vec3 Local4 = Local3.xyz;
	vec3 Local5 = (Local4 * FloatParameter_AddWordPositionColor);
	vec4 Local6 = texture(Texture2DParameter_normalmap_DefaultWrapSampler, in_0);
	//[Local6] Convert normalmaps to tangent space vectors
	Local6.xyzw = Local6.wzyx;
	Local6.xyz = ((Local6.xyz * 2.0f) - vec3(1.0f));
	Local6.z = -(Local6.z);
	Local6.xyz = normalize(Local6.xyz);
	//[Local6] Get needed components
	vec3 Local7 = Local6.xyz;
	float Local8 = pow((1.0f - clamp(dot(Local7, in_1), 0, 1)), 2.0f);
	vec3 Local9 = (Local5 * Local8);
	vec3 Local10 = (Local9 * 3.0f);
	vec4 Local11 = texture(Texture2DParameter_basecolor_DefaultWrapSampler, in_0);
	//[Local11] Get needed components
	vec3 Local12 = Local11.xyz;
	float Local13 = Local11.w;
	vec3 Local14 = (Local10 + Local12);
	out_0 = Local14;
}

void CalculateMatMetalMask(vec2 in_0,
	out float out_0)
{
	vec4 Local0 = texture(Texture2DParameter_physicalmap_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float Local1 = Local0.x;
	float Local2 = Local0.y;
	out_0 = Local1;
}

void CalculateMatReflectance(out float out_0)
{
	out_0 = FloatParameter_Reflectance;
}

void CalculateMatRoughness(vec2 in_0,
	out float out_0)
{
	vec4 Local0 = texture(Texture2DParameter_physicalmap_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float Local1 = Local0.x;
	float Local2 = Local0.y;
	out_0 = Local2;
}

void main()
{
	float matOpacity;
	CalculateMatOpacity(TexCoord0, matOpacity);
	matOpacity = (matOpacity * _OpacityFade);

	if(clip((matOpacity - (0.5f * _OpacityFade)))) discard;

	vec3 matEmissiveColor;
	//Flip back-facing WorldSpace Normal
	float FrontFace = ((float(gl_FrontFacing) * 2.0f) - 1.0f);
	vec3 WorldNormal = (TexCoord1 * FrontFace);

	//Normalize World Normal
	vec3 worldNormalNormalized = normalize(WorldNormal);

	//Normalize World Binormal
	vec3 worldBinormalNormalized = normalize(TexCoord2);

	//Normalize World Tangent
	vec3 worldTangentNormalized = normalize(TexCoord3);

	mat3x3 NBT = mat3x3(vec3(worldTangentNormalized.x, worldNormalNormalized.x, worldBinormalNormalized.x), vec3(worldTangentNormalized.y, worldNormalNormalized.y, worldBinormalNormalized.y), vec3(worldTangentNormalized.z, worldNormalNormalized.z, worldBinormalNormalized.z));

	//Normalized world space view vector
	vec3 worldViewNormalized = normalize(WorldView);

	//Calculate tangent space view vector
	vec3 tangentView = (NBT * worldViewNormalized);

	CalculateMatEmissiveColor(TexCoord0, tangentView, matEmissiveColor);
	vec3 matNormal;
	CalculateMatNormal(TexCoord0, matNormal);
	matNormal = normalize((matNormal * NBT));

	vec3 matBaseColor;
	CalculateMatBaseColor(TexCoord0, tangentView, matBaseColor);
	float matMetalMask;
	CalculateMatMetalMask(TexCoord0, matMetalMask);
	float matReflectance;
	CalculateMatReflectance(matReflectance);
	matReflectance = RemapReflectance(matReflectance);
	float matRoughness;
	CalculateMatRoughness(TexCoord0, matRoughness);
	matRoughness = max(0.09f, matRoughness);
	vec3 FinalColor = vec3(0.0f, 0.0f, 0.0f);

	//Calculate Image Based Lighting
	vec3 iblDiffuse;
	vec3 iblSpecular;
	EvaluateDistantIBL(matBaseColor, matRoughness, vec3(matReflectance, matReflectance, matReflectance), matMetalMask, matNormal, worldViewNormalized, iblDiffuse, iblSpecular);
	FinalColor = ((FinalColor + iblDiffuse) + iblSpecular);

	vec3 LightDiffuseColorOut;
	vec3 LightSpecularColorOut;
	DirectionLight(matNormal, worldViewNormalized, global_LightPropertyMatrix, matBaseColor, matReflectance, matRoughness, matMetalMask, LightDiffuseColorOut, LightSpecularColorOut);
	FinalColor = ((FinalColor + LightDiffuseColorOut) + LightSpecularColorOut);

	FinalColor = PreExpose(FinalColor);

	FinalColor = (FinalColor + (matEmissiveColor * vec3(!bool(global_Data.y))));

	FinalColor = mix(global_FogPropertyMatrix[1], FinalColor, vec3(HeightFog, HeightFog, HeightFog));
	FinalColor = mix(global_FogPropertyMatrix[0], FinalColor, vec3(DistanceFog, DistanceFog, DistanceFog));

	outColor0 = vec4(FinalColor, matOpacity);
	outColor0 = max(outColor0, 0.0f);
}
