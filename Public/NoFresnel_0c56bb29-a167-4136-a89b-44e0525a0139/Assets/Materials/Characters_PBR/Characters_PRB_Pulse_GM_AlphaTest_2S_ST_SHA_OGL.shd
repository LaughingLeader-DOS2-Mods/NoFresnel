[Vertex shader]

#version 150
#extension GL_ARB_shading_language_include : enable
#include "/Shaders/GLSL3/CommonHelpers.shdh"
#include "/Shaders/GlobalConstants_OGL.shdh"

in vec4 inColor0;
in vec4 inNormal0;
in vec3 inPosition0;
in vec2 inTexCoord0;

out vec4 Position0;
out vec2 TexCoord0;
out float TexCoord1;

uniform mat4x4 WorldMatrix;
uniform float FloatParameter_PulseSpeed;
uniform float FloatParameter_PulseSize;
uniform float FloatParameter_PulseStrength;

void CalculateMatWorldPositionOffset(vec4 in_0,
	vec3 in_1,
	vec3 in_2,
	vec3 in_3,
	out vec3 out_0)
{
	vec3 Local0 = (in_0.y * in_1);
	float Local1 = (global_Data.x * FloatParameter_PulseSpeed);
	vec3 Local2 = in_2;
	float Local3 = length(Local2);
	float Local4 = in_3.y;
	float Local5 = (Local4 / FloatParameter_PulseSize);
	float Local6 = (Local3 + Local5);
	float Local7 = (Local6 + in_0.z);
	float Local8 = (Local1 + Local7);
	//TriangleWave
	float Local9 = abs(((fract((Local8 + 0.5f)) * 2.0f) - 1.0f));
	//Smooth TriangleWave
	float Local10 = ((Local9 * Local9) * (3.0f - (2.0f * Local9)));
	//Bring TriangleWave between range [min, max]
	float Local11 = ((Local10 * (FloatParameter_PulseStrength - 0.0f)) + 0.0f);
	vec3 Local12 = (Local0 * Local11);
	out_0 = Local12;
}

void main()
{
	vec3 matWorldPositionOffset;
	//Compute local tangent frame
	mat3x3 LocalTangentFrame = GetTangentFrame(inNormal0);

	vec3 LocalNormal = LocalTangentFrame[2];

	//Normalize Local Normal
	vec3 localNormalNormalized = normalize(LocalNormal);

	//World space Normal
	vec3 worldNormal = (mat3x3(WorldMatrix[0].xyz, WorldMatrix[1].xyz, WorldMatrix[2].xyz) * localNormalNormalized);

	//Normalize World Normal
	vec3 worldNormalNormalized = normalize(worldNormal);

	//Object World Position
	vec3 objectWorldPosition = vec3(WorldMatrix[3].x, WorldMatrix[3].y, WorldMatrix[3].z);

	CalculateMatWorldPositionOffset(inColor0, worldNormalNormalized, objectWorldPosition, inPosition0.xyz, matWorldPositionOffset);
	//World space position
	vec4 worldPosition = (WorldMatrix * vec4(inPosition0, 1.0f));

	worldPosition = (worldPosition + vec4(matWorldPositionOffset, 0.0f));

	//Projected position
	vec4 projectedPosition = (global_ViewProjection * worldPosition);

	//Pass projected position to pixel shader
	Position0 = projectedPosition;

	TexCoord0 = inTexCoord0;
	float vertexDepth;
	vertexDepth = distance(worldPosition.xyz, global_ViewPos.xyz);
	//Pass depth to pixel shader
	TexCoord1 = vertexDepth;

	gl_Position = Position0;
}


[Fragment shader]

#version 150
#extension GL_ARB_shading_language_include : enable
#include "/Shaders/GLSL3/CommonHelpers.shdh"

in vec4 Position0;
in vec2 TexCoord0;
in float TexCoord1;

out vec4 outColor0;

uniform sampler2D Texture2DParameter_basecolor_DefaultWrapSampler;

void CalculateMatOpacity(vec2 in_0,
	out float out_0)
{
	vec4 Local0 = texture(Texture2DParameter_basecolor_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	vec3 Local1 = Local0.xyz;
	float Local2 = Local0.w;
	out_0 = Local2;
}

void main()
{
	float matOpacity;
	CalculateMatOpacity(TexCoord0, matOpacity);
	if((matOpacity - 0.5f) < 0) discard;

	float Local0 = dFdx(TexCoord1);
	float Local1 = dFdy(TexCoord1);
	outColor0 = vec4(0.0f, 0.0f, 0.0f, 0.0f);
	outColor0.x = TexCoord1;
	outColor0.y = ((TexCoord1 * TexCoord1) + (((Local0 * Local0) + (Local1 * Local1)) * 0.25f));
}
