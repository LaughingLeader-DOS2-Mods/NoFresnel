[Vertex shader]


#include "Shaders/PS4/srt_struct.h"
#include "Shaders/PS4/CommonHelpers.shdh"

struct VertexOutput
{
	float4 ProjectedPosition : S_Position;
	float2 TexCoords0 : TEXCOORD0;
};

@uniform row_major float4x4 WorldMatrix;
VertexOutput main(uint id : S_VERTEX_ID,
	SrtVsData srtData : S_SRT_DATA)
{
	// Retrieve SRT data:
	@uniform(global_View);
	@uniform(global_ViewProjection);
	@uniform(WorldMatrix);

	VertexOutput Out;

	row_major float3x4 boneMatrix1 = SRT_VS_BONES_BONE(SRT_VS_BONES_INDICIES(id).x);
	row_major float3x4 boneMatrix2 = SRT_VS_BONES_BONE(SRT_VS_BONES_INDICIES(id).y);
	row_major float3x4 boneMatrix3 = SRT_VS_BONES_BONE(SRT_VS_BONES_INDICIES(id).z);
	row_major float3x4 boneMatrix4 = SRT_VS_BONES_BONE(SRT_VS_BONES_INDICIES(id).w);
	//World space position
	float4 worldPosition = float4(0.0f, 0.0f, 0.0f, 1.0f);
	float4 tempPosSkinned = float4(SRT_VS_BUFFER_POSITION(id).xyz, 1.0f);
	worldPosition.xyz = (worldPosition.xyz + (SRT_VS_BONES_WEIGHTS(id).x * mul(boneMatrix1, tempPosSkinned)));
	worldPosition.xyz = (worldPosition.xyz + (SRT_VS_BONES_WEIGHTS(id).y * mul(boneMatrix2, tempPosSkinned)));
	worldPosition.xyz = (worldPosition.xyz + (SRT_VS_BONES_WEIGHTS(id).z * mul(boneMatrix3, tempPosSkinned)));
	worldPosition.xyz = (worldPosition.xyz + (SRT_VS_BONES_WEIGHTS(id).w * mul(boneMatrix4, tempPosSkinned)));
	worldPosition = mul(WorldMatrix, worldPosition);

	//Projected position
	float4 projectedPosition = mul(global_ViewProjection, worldPosition);

	//Pass projected position to pixel shader
	Out.ProjectedPosition = projectedPosition;

	Out.TexCoords0 = SRT_VS_BUFFER_TEXCOORD0(id);

	return Out;
}


[Fragment shader]


#include "Shaders/PS4/srt_struct.h"
#include "Shaders/PS4/CommonHelpers.shdh"

struct PixelInput
{
	float4 ProjectedPosition : S_Position;
	float2 TexCoords0 : TEXCOORD0;
};

struct PixelOutput
{
};

@uniform SamplerState _DefaultWrapSampler;
@uniform Texture2D Texture2DParameter_MSKskin_DefaultWrapSampler;
@uniform Texture2D Texture2DParameter_basecolor_DefaultWrapSampler;
void CalculateMatOpacity(SrtPsData srtData : S_SRT_DATA,
	float2 in_0,
	out float out_0)
{
	// Retrieve SRT data:
	@uniform(_DefaultWrapSampler);
	@uniform(Texture2DParameter_MSKskin_DefaultWrapSampler);
	@uniform(Texture2DParameter_basecolor_DefaultWrapSampler);

	float4 Local0 = Texture2DParameter_MSKskin_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float Local1 = Local0.x;
	float Local2 = Local0.y;
	float Local3 = (1.0f - Local1);
	float4 Local4 = Texture2DParameter_basecolor_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local4] Get needed components
	float3 Local5 = Local4.xyz;
	float Local6 = Local4.w;
	float Local7 = (Local3 * Local6);
	float Local8 = (Local7 * 0.8f);
	out_0 = Local8;
}

PixelOutput main(PixelInput In,
	SrtPsData srtData : S_SRT_DATA)
{
	PixelOutput Out;

	float matOpacity;
	CalculateMatOpacity(srtData, In.TexCoords0, matOpacity);
	clip((matOpacity - 0.5f));


	return Out;
}
