[Vertex shader]

#version 150
#extension GL_ARB_shading_language_include : enable
#include "/Shaders/GLSL3/CommonHelpers.shdh"
#include "/Shaders/GlobalConstants_OGL.shdh"

in vec4 inBlendIndices0;
in vec4 inBlendWeight0;
in vec3 inPosition0;
in vec2 inTexCoord0;

out vec4 Position0;
out vec2 TexCoord0;

uniform mat4x3 BoneMatrices[128];
uniform mat4x4 WorldMatrix;

void main()
{
	mat4x3 boneMatrix1 = BoneMatrices[int(inBlendIndices0.x)];
	mat4x3 boneMatrix2 = BoneMatrices[int(inBlendIndices0.y)];
	mat4x3 boneMatrix3 = BoneMatrices[int(inBlendIndices0.z)];
	mat4x3 boneMatrix4 = BoneMatrices[int(inBlendIndices0.w)];
	//World space position
	vec4 worldPosition = vec4(0.0f, 0.0f, 0.0f, 1.0f);
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.x * (boneMatrix1 * vec4(inPosition0, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.y * (boneMatrix2 * vec4(inPosition0, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.z * (boneMatrix3 * vec4(inPosition0, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.w * (boneMatrix4 * vec4(inPosition0, 1.0f))));
	worldPosition = (WorldMatrix * worldPosition);

	//Projected position
	vec4 projectedPosition = (global_ViewProjection * worldPosition);

	//Pass projected position to pixel shader
	Position0 = projectedPosition;

	TexCoord0 = inTexCoord0;
	gl_Position = Position0;
}


[Fragment shader]

#version 150
#extension GL_ARB_shading_language_include : enable
#include "/Shaders/GLSL3/CommonHelpers.shdh"

in vec4 Position0;
in vec2 TexCoord0;


uniform sampler2D Texture2DParameter_MSKskin_DefaultWrapSampler;
uniform sampler2D Texture2DParameter_basecolor_DefaultWrapSampler;

void CalculateMatOpacity(vec2 in_0,
	out float out_0)
{
	vec4 Local0 = texture(Texture2DParameter_MSKskin_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float Local1 = Local0.x;
	float Local2 = Local0.y;
	float Local3 = (1.0f - Local1);
	vec4 Local4 = texture(Texture2DParameter_basecolor_DefaultWrapSampler, in_0);
	//[Local4] Get needed components
	vec3 Local5 = Local4.xyz;
	float Local6 = Local4.w;
	float Local7 = (Local3 * Local6);
	float Local8 = (Local7 * 0.8f);
	out_0 = Local8;
}

void main()
{
	float matOpacity;
	CalculateMatOpacity(TexCoord0, matOpacity);
	if((matOpacity - 0.5f) < 0) discard;

}
