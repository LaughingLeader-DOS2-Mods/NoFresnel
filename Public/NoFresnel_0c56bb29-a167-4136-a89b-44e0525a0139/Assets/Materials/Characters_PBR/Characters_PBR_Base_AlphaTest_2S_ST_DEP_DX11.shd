[Vertex shader]


#include "Shaders/DX11/CommonHelpers.shdh"
#include "Shaders/GlobalConstants_DX11.shdh"

struct VertexInput
{
	float3 Position : POSITION0;
	float2 TexCoords0 : TEXCOORD0;
};

struct VertexOutput
{
	float4 ProjectedPosition : SV_Position0;
	float2 TexCoords0 : TEXCOORD0;
};

cbuffer CB_PerInstance
{
	row_major float4x4 WorldMatrix;
}

VertexOutput main(VertexInput In)
{
	VertexOutput Out;

	//World space position
	float4 worldPosition = mul(WorldMatrix, float4(In.Position, 1.0f));

	//Projected position
	float4 projectedPosition = mul(global_ViewProjection, worldPosition);

	//Pass projected position to pixel shader
	Out.ProjectedPosition = projectedPosition;

	Out.TexCoords0 = In.TexCoords0;

	return Out;
}


[Fragment shader]


#include "Shaders/DX11/CommonHelpers.shdh"

struct PixelInput
{
	float4 ProjectedPosition : SV_Position0;
	float2 TexCoords0 : TEXCOORD0;
};

struct PixelOutput
{
};

uniform SamplerState _DefaultWrapSampler;
uniform Texture2D Texture2DParameter_basecolor_DefaultWrapSampler;

void CalculateMatOpacity(float2 in_0,
	out float out_0)
{
	float4 Local0 = Texture2DParameter_basecolor_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float3 Local1 = Local0.xyz;
	float Local2 = Local0.w;
	out_0 = Local2;
}

PixelOutput main(PixelInput In)
{
	PixelOutput Out;

	float matOpacity;
	CalculateMatOpacity(In.TexCoords0, matOpacity);
	clip((matOpacity - 0.5f));


	return Out;
}
