[Vertex shader]


#include "Shaders/PS4/srt_struct.h"
#include "Shaders/PS4/CommonHelpers.shdh"

struct VertexOutput
{
	float4 ProjectedPosition : S_Position;
	float2 TexCoords0 : TEXCOORD0;
	float ShadowDepth : TEXCOORD1;
};

@uniform row_major float4x4 WorldMatrix;
@uniform float FloatParameter_PulseSpeed;
@uniform float FloatParameter_PulseSize;
@uniform float FloatParameter_PulseStrength;
void CalculateMatWorldPositionOffset(SrtVsData srtData : S_SRT_DATA,
	float4 in_0,
	float3 in_1,
	float3 in_2,
	float3 in_3,
	out float3 out_0)
{
	// Retrieve SRT data:
	@uniform(global_Data);
	@uniform(FloatParameter_PulseSpeed);
	@uniform(FloatParameter_PulseSize);
	@uniform(FloatParameter_PulseStrength);

	float3 Local0 = (in_0.y * in_1);
	float Local1 = (global_Data.x * FloatParameter_PulseSpeed);
	float3 Local2 = in_2;
	float Local3 = length(Local2);
	float Local4 = in_3.y;
	float Local5 = (Local4 / FloatParameter_PulseSize);
	float Local6 = (Local3 + Local5);
	float Local7 = (Local6 + in_0.z);
	float Local8 = (Local1 + Local7);
	//TriangleWave
	float Local9 = abs(((frac((Local8 + 0.5f)) * 2.0f) - 1.0f));
	//Smooth TriangleWave
	float Local10 = ((Local9 * Local9) * (3.0f - (2.0f * Local9)));
	//Bring TriangleWave between range [min, max]
	float Local11 = ((Local10 * (FloatParameter_PulseStrength - 0.0f)) + 0.0f);
	float3 Local12 = (Local0 * Local11);
	out_0 = Local12;
}

VertexOutput main(uint id : S_VERTEX_ID,
	SrtVsData srtData : S_SRT_DATA)
{
	// Retrieve SRT data:
	@uniform(global_View);
	@uniform(global_ViewProjection);
	@uniform(global_ViewPos);
	@uniform(WorldMatrix);

	VertexOutput Out;

	float3 matWorldPositionOffset;
	//Compute local tangent frame
	row_major float3x3 LocalTangentFrame = GetTangentFrame(SRT_VS_BUFFER_QTANGENT(id));

	float3 LocalNormal = LocalTangentFrame[2];

	//Normalize Local Normal
	float3 localNormalNormalized = normalize(LocalNormal);

	//World space Normal
	float3 worldNormal = mul(row_major float3x3(WorldMatrix), localNormalNormalized);

	//Normalize World Normal
	float3 worldNormalNormalized = normalize(worldNormal);

	//Object World Position
	float3 objectWorldPosition = float3(WorldMatrix[0].w, WorldMatrix[1].w, WorldMatrix[2].w);

	CalculateMatWorldPositionOffset(srtData, SRT_VS_BUFFER_COLOR(id), worldNormalNormalized, objectWorldPosition, SRT_VS_BUFFER_POSITION(id).xyz, matWorldPositionOffset);
	float4 tempPosStatic = float4(SRT_VS_BUFFER_POSITION(id).xyz, 1.0f);
	//World space position
	float4 worldPosition = mul(WorldMatrix, tempPosStatic);

	worldPosition = (worldPosition + float4(matWorldPositionOffset, 0.0f));

	//Projected position
	float4 projectedPosition = mul(global_ViewProjection, worldPosition);

	//Pass projected position to pixel shader
	Out.ProjectedPosition = projectedPosition;

	Out.TexCoords0 = SRT_VS_BUFFER_TEXCOORD0(id);
	float vertexDepth;
	vertexDepth = distance(worldPosition.xyz, global_ViewPos.xyz);
	//Pass depth to pixel shader
	Out.ShadowDepth = vertexDepth;


	return Out;
}


[Fragment shader]


#pragma PSSL_target_output_format(target 0 FMT_32_GR)
#include "Shaders/PS4/srt_struct.h"
#include "Shaders/PS4/CommonHelpers.shdh"

struct PixelInput
{
	float4 ProjectedPosition : S_Position;
	float2 TexCoords0 : TEXCOORD0;
	float ShadowDepth : TEXCOORD1;
};

struct PixelOutput
{
	float4 Color0 : S_TARGET_OUTPUT0;
};

@uniform SamplerState _DefaultWrapSampler;
@uniform Texture2D Texture2DParameter_basecolor_DefaultWrapSampler;
void CalculateMatOpacity(SrtPsData srtData : S_SRT_DATA,
	float2 in_0,
	out float out_0)
{
	// Retrieve SRT data:
	@uniform(_DefaultWrapSampler);
	@uniform(Texture2DParameter_basecolor_DefaultWrapSampler);

	float4 Local0 = Texture2DParameter_basecolor_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float3 Local1 = Local0.xyz;
	float Local2 = Local0.w;
	out_0 = Local2;
}

PixelOutput main(PixelInput In,
	SrtPsData srtData : S_SRT_DATA)
{
	PixelOutput Out;

	float matOpacity;
	CalculateMatOpacity(srtData, In.TexCoords0, matOpacity);
	clip((matOpacity - 0.5f));

	float Local0 = ddx(In.ShadowDepth);
	float Local1 = ddy(In.ShadowDepth);
	Out.Color0 = float4(0.0f, 0.0f, 0.0f, 0.0f);
	Out.Color0.x = In.ShadowDepth;
	Out.Color0.y = ((In.ShadowDepth * In.ShadowDepth) + (((Local0 * Local0) + (Local1 * Local1)) * 0.25f));

	return Out;
}
